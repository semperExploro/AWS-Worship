"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartStreamTranscriptionResponseFilterSensitiveLog = exports.TranscriptResultStreamFilterSensitiveLog = exports.StartStreamTranscriptionRequestFilterSensitiveLog = exports.StartMedicalStreamTranscriptionResponseFilterSensitiveLog = exports.StartMedicalStreamTranscriptionRequestFilterSensitiveLog = exports.StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog = exports.StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog = exports.MedicalTranscriptResultStreamFilterSensitiveLog = exports.CallAnalyticsTranscriptResultStreamFilterSensitiveLog = exports.AudioStreamFilterSensitiveLog = exports.TranscriptResultStream = exports.Type = exports.VocabularyFilterMethod = exports.Specialty = exports.PartialResultsStability = exports.MedicalTranscriptResultStream = exports.MedicalContentIdentificationType = exports.MediaEncoding = exports.LanguageCode = exports.ContentRedactionType = exports.ContentIdentificationType = exports.CallAnalyticsTranscriptResultStream = exports.Sentiment = exports.ServiceUnavailableException = exports.LimitExceededException = exports.InternalFailureException = exports.ConflictException = exports.CallAnalyticsLanguageCode = exports.BadRequestException = exports.AudioStream = exports.ContentRedactionOutput = exports.ParticipantRole = exports.ItemType = void 0;
const TranscribeStreamingServiceException_1 = require("./TranscribeStreamingServiceException");
exports.ItemType = {
    PRONUNCIATION: "pronunciation",
    PUNCTUATION: "punctuation",
};
exports.ParticipantRole = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
};
exports.ContentRedactionOutput = {
    REDACTED: "redacted",
    REDACTED_AND_UNREDACTED: "redacted_and_unredacted",
};
var AudioStream;
(function (AudioStream) {
    AudioStream.visit = (value, visitor) => {
        if (value.AudioEvent !== undefined)
            return visitor.AudioEvent(value.AudioEvent);
        if (value.ConfigurationEvent !== undefined)
            return visitor.ConfigurationEvent(value.ConfigurationEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AudioStream = exports.AudioStream || (exports.AudioStream = {}));
class BadRequestException extends TranscribeStreamingServiceException_1.TranscribeStreamingServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
exports.CallAnalyticsLanguageCode = {
    DE_DE: "de-DE",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_US: "en-US",
    ES_US: "es-US",
    FR_CA: "fr-CA",
    FR_FR: "fr-FR",
    IT_IT: "it-IT",
    PT_BR: "pt-BR",
};
class ConflictException extends TranscribeStreamingServiceException_1.TranscribeStreamingServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
class InternalFailureException extends TranscribeStreamingServiceException_1.TranscribeStreamingServiceException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalFailureException = InternalFailureException;
class LimitExceededException extends TranscribeStreamingServiceException_1.TranscribeStreamingServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
class ServiceUnavailableException extends TranscribeStreamingServiceException_1.TranscribeStreamingServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
exports.Sentiment = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
var CallAnalyticsTranscriptResultStream;
(function (CallAnalyticsTranscriptResultStream) {
    CallAnalyticsTranscriptResultStream.visit = (value, visitor) => {
        if (value.UtteranceEvent !== undefined)
            return visitor.UtteranceEvent(value.UtteranceEvent);
        if (value.CategoryEvent !== undefined)
            return visitor.CategoryEvent(value.CategoryEvent);
        if (value.BadRequestException !== undefined)
            return visitor.BadRequestException(value.BadRequestException);
        if (value.LimitExceededException !== undefined)
            return visitor.LimitExceededException(value.LimitExceededException);
        if (value.InternalFailureException !== undefined)
            return visitor.InternalFailureException(value.InternalFailureException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.ServiceUnavailableException !== undefined)
            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(CallAnalyticsTranscriptResultStream = exports.CallAnalyticsTranscriptResultStream || (exports.CallAnalyticsTranscriptResultStream = {}));
exports.ContentIdentificationType = {
    PII: "PII",
};
exports.ContentRedactionType = {
    PII: "PII",
};
exports.LanguageCode = {
    DE_DE: "de-DE",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_US: "en-US",
    ES_US: "es-US",
    FR_CA: "fr-CA",
    FR_FR: "fr-FR",
    HI_IN: "hi-IN",
    IT_IT: "it-IT",
    JA_JP: "ja-JP",
    KO_KR: "ko-KR",
    PT_BR: "pt-BR",
    TH_TH: "th-TH",
    ZH_CN: "zh-CN",
};
exports.MediaEncoding = {
    FLAC: "flac",
    OGG_OPUS: "ogg-opus",
    PCM: "pcm",
};
exports.MedicalContentIdentificationType = {
    PHI: "PHI",
};
var MedicalTranscriptResultStream;
(function (MedicalTranscriptResultStream) {
    MedicalTranscriptResultStream.visit = (value, visitor) => {
        if (value.TranscriptEvent !== undefined)
            return visitor.TranscriptEvent(value.TranscriptEvent);
        if (value.BadRequestException !== undefined)
            return visitor.BadRequestException(value.BadRequestException);
        if (value.LimitExceededException !== undefined)
            return visitor.LimitExceededException(value.LimitExceededException);
        if (value.InternalFailureException !== undefined)
            return visitor.InternalFailureException(value.InternalFailureException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.ServiceUnavailableException !== undefined)
            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(MedicalTranscriptResultStream = exports.MedicalTranscriptResultStream || (exports.MedicalTranscriptResultStream = {}));
exports.PartialResultsStability = {
    HIGH: "high",
    LOW: "low",
    MEDIUM: "medium",
};
exports.Specialty = {
    CARDIOLOGY: "CARDIOLOGY",
    NEUROLOGY: "NEUROLOGY",
    ONCOLOGY: "ONCOLOGY",
    PRIMARYCARE: "PRIMARYCARE",
    RADIOLOGY: "RADIOLOGY",
    UROLOGY: "UROLOGY",
};
exports.VocabularyFilterMethod = {
    MASK: "mask",
    REMOVE: "remove",
    TAG: "tag",
};
exports.Type = {
    CONVERSATION: "CONVERSATION",
    DICTATION: "DICTATION",
};
var TranscriptResultStream;
(function (TranscriptResultStream) {
    TranscriptResultStream.visit = (value, visitor) => {
        if (value.TranscriptEvent !== undefined)
            return visitor.TranscriptEvent(value.TranscriptEvent);
        if (value.BadRequestException !== undefined)
            return visitor.BadRequestException(value.BadRequestException);
        if (value.LimitExceededException !== undefined)
            return visitor.LimitExceededException(value.LimitExceededException);
        if (value.InternalFailureException !== undefined)
            return visitor.InternalFailureException(value.InternalFailureException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.ServiceUnavailableException !== undefined)
            return visitor.ServiceUnavailableException(value.ServiceUnavailableException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TranscriptResultStream = exports.TranscriptResultStream || (exports.TranscriptResultStream = {}));
const AudioStreamFilterSensitiveLog = (obj) => {
    if (obj.AudioEvent !== undefined)
        return { AudioEvent: obj.AudioEvent };
    if (obj.ConfigurationEvent !== undefined)
        return { ConfigurationEvent: obj.ConfigurationEvent };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.AudioStreamFilterSensitiveLog = AudioStreamFilterSensitiveLog;
const CallAnalyticsTranscriptResultStreamFilterSensitiveLog = (obj) => {
    if (obj.UtteranceEvent !== undefined)
        return { UtteranceEvent: obj.UtteranceEvent };
    if (obj.CategoryEvent !== undefined)
        return { CategoryEvent: obj.CategoryEvent };
    if (obj.BadRequestException !== undefined)
        return { BadRequestException: obj.BadRequestException };
    if (obj.LimitExceededException !== undefined)
        return { LimitExceededException: obj.LimitExceededException };
    if (obj.InternalFailureException !== undefined)
        return { InternalFailureException: obj.InternalFailureException };
    if (obj.ConflictException !== undefined)
        return { ConflictException: obj.ConflictException };
    if (obj.ServiceUnavailableException !== undefined)
        return { ServiceUnavailableException: obj.ServiceUnavailableException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.CallAnalyticsTranscriptResultStreamFilterSensitiveLog = CallAnalyticsTranscriptResultStreamFilterSensitiveLog;
const MedicalTranscriptResultStreamFilterSensitiveLog = (obj) => {
    if (obj.TranscriptEvent !== undefined)
        return { TranscriptEvent: obj.TranscriptEvent };
    if (obj.BadRequestException !== undefined)
        return { BadRequestException: obj.BadRequestException };
    if (obj.LimitExceededException !== undefined)
        return { LimitExceededException: obj.LimitExceededException };
    if (obj.InternalFailureException !== undefined)
        return { InternalFailureException: obj.InternalFailureException };
    if (obj.ConflictException !== undefined)
        return { ConflictException: obj.ConflictException };
    if (obj.ServiceUnavailableException !== undefined)
        return { ServiceUnavailableException: obj.ServiceUnavailableException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.MedicalTranscriptResultStreamFilterSensitiveLog = MedicalTranscriptResultStreamFilterSensitiveLog;
const StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }),
});
exports.StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog = StartCallAnalyticsStreamTranscriptionRequestFilterSensitiveLog;
const StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CallAnalyticsTranscriptResultStream && { CallAnalyticsTranscriptResultStream: "STREAMING_CONTENT" }),
});
exports.StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog = StartCallAnalyticsStreamTranscriptionResponseFilterSensitiveLog;
const StartMedicalStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }),
});
exports.StartMedicalStreamTranscriptionRequestFilterSensitiveLog = StartMedicalStreamTranscriptionRequestFilterSensitiveLog;
const StartMedicalStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TranscriptResultStream && { TranscriptResultStream: "STREAMING_CONTENT" }),
});
exports.StartMedicalStreamTranscriptionResponseFilterSensitiveLog = StartMedicalStreamTranscriptionResponseFilterSensitiveLog;
const StartStreamTranscriptionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AudioStream && { AudioStream: "STREAMING_CONTENT" }),
});
exports.StartStreamTranscriptionRequestFilterSensitiveLog = StartStreamTranscriptionRequestFilterSensitiveLog;
const TranscriptResultStreamFilterSensitiveLog = (obj) => {
    if (obj.TranscriptEvent !== undefined)
        return { TranscriptEvent: obj.TranscriptEvent };
    if (obj.BadRequestException !== undefined)
        return { BadRequestException: obj.BadRequestException };
    if (obj.LimitExceededException !== undefined)
        return { LimitExceededException: obj.LimitExceededException };
    if (obj.InternalFailureException !== undefined)
        return { InternalFailureException: obj.InternalFailureException };
    if (obj.ConflictException !== undefined)
        return { ConflictException: obj.ConflictException };
    if (obj.ServiceUnavailableException !== undefined)
        return { ServiceUnavailableException: obj.ServiceUnavailableException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.TranscriptResultStreamFilterSensitiveLog = TranscriptResultStreamFilterSensitiveLog;
const StartStreamTranscriptionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TranscriptResultStream && { TranscriptResultStream: "STREAMING_CONTENT" }),
});
exports.StartStreamTranscriptionResponseFilterSensitiveLog = StartStreamTranscriptionResponseFilterSensitiveLog;
