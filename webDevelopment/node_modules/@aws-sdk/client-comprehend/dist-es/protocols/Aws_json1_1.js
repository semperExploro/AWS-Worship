import { _json, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@aws-sdk/smithy-client";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { v4 as generateIdempotencyToken } from "uuid";
import { ComprehendServiceException as __BaseException } from "../models/ComprehendServiceException";
import { BatchSizeLimitExceededException, InternalServerException, InvalidFilterException, InvalidRequestException, JobNotFoundException, KmsKeyValidationException, ResourceInUseException, ResourceLimitExceededException, ResourceNotFoundException, ResourceUnavailableException, TextSizeLimitExceededException, TooManyRequestsException, TooManyTagsException, UnsupportedLanguageException, } from "../models/models_0";
import { ConcurrentModificationException, TooManyTagKeysException, } from "../models/models_1";
export const se_BatchDetectDominantLanguageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectDominantLanguage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDetectEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectEntities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDetectKeyPhrasesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectKeyPhrases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDetectSentimentCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectSentiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDetectSyntaxCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectSyntax");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDetectTargetedSentimentCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDetectTargetedSentiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ClassifyDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("ClassifyDocument");
    let body;
    body = JSON.stringify(se_ClassifyDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ContainsPiiEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ContainsPiiEntities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(se_CreateDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDocumentClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDocumentClassifier");
    let body;
    body = JSON.stringify(se_CreateDocumentClassifierRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpoint");
    let body;
    body = JSON.stringify(se_CreateEndpointRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEntityRecognizerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEntityRecognizer");
    let body;
    body = JSON.stringify(se_CreateEntityRecognizerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFlywheelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFlywheel");
    let body;
    body = JSON.stringify(se_CreateFlywheelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDocumentClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDocumentClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEntityRecognizerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEntityRecognizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFlywheelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFlywheel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDocumentClassificationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDocumentClassificationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDocumentClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDocumentClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDominantLanguageDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDominantLanguageDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntitiesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntityRecognizerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntityRecognizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventsDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventsDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFlywheelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFlywheel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFlywheelIterationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFlywheelIteration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeKeyPhrasesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeKeyPhrasesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePiiEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePiiEntitiesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSentimentDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTargetedSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTargetedSentimentDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTopicsDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTopicsDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectDominantLanguageCommand = async (input, context) => {
    const headers = sharedHeaders("DetectDominantLanguage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectEntities");
    let body;
    body = JSON.stringify(se_DetectEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectKeyPhrasesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectKeyPhrases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectPiiEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectPiiEntities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectSentimentCommand = async (input, context) => {
    const headers = sharedHeaders("DetectSentiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectSyntaxCommand = async (input, context) => {
    const headers = sharedHeaders("DetectSyntax");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectTargetedSentimentCommand = async (input, context) => {
    const headers = sharedHeaders("DetectTargetedSentiment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportModelCommand = async (input, context) => {
    const headers = sharedHeaders("ImportModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasets");
    let body;
    body = JSON.stringify(se_ListDatasetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDocumentClassificationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocumentClassificationJobs");
    let body;
    body = JSON.stringify(se_ListDocumentClassificationJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDocumentClassifiersCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocumentClassifiers");
    let body;
    body = JSON.stringify(se_ListDocumentClassifiersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDocumentClassifierSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDocumentClassifierSummaries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDominantLanguageDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDominantLanguageDetectionJobs");
    let body;
    body = JSON.stringify(se_ListDominantLanguageDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpoints");
    let body;
    body = JSON.stringify(se_ListEndpointsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEntitiesDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntitiesDetectionJobs");
    let body;
    body = JSON.stringify(se_ListEntitiesDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEntityRecognizersCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntityRecognizers");
    let body;
    body = JSON.stringify(se_ListEntityRecognizersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEntityRecognizerSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntityRecognizerSummaries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEventsDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventsDetectionJobs");
    let body;
    body = JSON.stringify(se_ListEventsDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFlywheelIterationHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListFlywheelIterationHistory");
    let body;
    body = JSON.stringify(se_ListFlywheelIterationHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFlywheelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFlywheels");
    let body;
    body = JSON.stringify(se_ListFlywheelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListKeyPhrasesDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListKeyPhrasesDetectionJobs");
    let body;
    body = JSON.stringify(se_ListKeyPhrasesDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPiiEntitiesDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPiiEntitiesDetectionJobs");
    let body;
    body = JSON.stringify(se_ListPiiEntitiesDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSentimentDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSentimentDetectionJobs");
    let body;
    body = JSON.stringify(se_ListSentimentDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTargetedSentimentDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTargetedSentimentDetectionJobs");
    let body;
    body = JSON.stringify(se_ListTargetedSentimentDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTopicsDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTopicsDetectionJobs");
    let body;
    body = JSON.stringify(se_ListTopicsDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDocumentClassificationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartDocumentClassificationJob");
    let body;
    body = JSON.stringify(se_StartDocumentClassificationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDominantLanguageDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartDominantLanguageDetectionJob");
    let body;
    body = JSON.stringify(se_StartDominantLanguageDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartEntitiesDetectionJob");
    let body;
    body = JSON.stringify(se_StartEntitiesDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEventsDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartEventsDetectionJob");
    let body;
    body = JSON.stringify(se_StartEventsDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFlywheelIterationCommand = async (input, context) => {
    const headers = sharedHeaders("StartFlywheelIteration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartKeyPhrasesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartKeyPhrasesDetectionJob");
    let body;
    body = JSON.stringify(se_StartKeyPhrasesDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartPiiEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartPiiEntitiesDetectionJob");
    let body;
    body = JSON.stringify(se_StartPiiEntitiesDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartSentimentDetectionJob");
    let body;
    body = JSON.stringify(se_StartSentimentDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTargetedSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTargetedSentimentDetectionJob");
    let body;
    body = JSON.stringify(se_StartTargetedSentimentDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTopicsDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTopicsDetectionJob");
    let body;
    body = JSON.stringify(se_StartTopicsDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopDominantLanguageDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopDominantLanguageDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopEntitiesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEventsDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopEventsDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopKeyPhrasesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopKeyPhrasesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopPiiEntitiesDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopPiiEntitiesDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopSentimentDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTargetedSentimentDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTargetedSentimentDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTrainingDocumentClassifierCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrainingDocumentClassifier");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTrainingEntityRecognizerCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrainingEntityRecognizer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFlywheelCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFlywheel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_BatchDetectDominantLanguageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectDominantLanguageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectDominantLanguageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectDominantLanguageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDetectEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDetectKeyPhrasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectKeyPhrasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectKeyPhrasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectKeyPhrasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDetectSentimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectSentimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectSentimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectSentimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDetectSyntaxCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectSyntaxCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectSyntaxResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectSyntaxCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_BatchDetectTargetedSentimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDetectTargetedSentimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchDetectTargetedSentimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDetectTargetedSentimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchSizeLimitExceededException":
        case "com.amazonaws.comprehend#BatchSizeLimitExceededException":
            throw await de_BatchSizeLimitExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ClassifyDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ClassifyDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ClassifyDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ClassifyDocumentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ContainsPiiEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ContainsPiiEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ContainsPiiEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ContainsPiiEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDatasetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDatasetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateDocumentClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDocumentClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDocumentClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateEntityRecognizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEntityRecognizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEntityRecognizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_CreateFlywheelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateFlywheelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFlywheelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteDocumentClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDocumentClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDocumentClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteEntityRecognizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEntityRecognizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteEntityRecognizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteFlywheelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteFlywheelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFlywheelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDatasetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDatasetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDocumentClassificationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDocumentClassificationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDocumentClassificationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDocumentClassificationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDocumentClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDocumentClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDocumentClassifierResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDocumentClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeDominantLanguageDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDominantLanguageDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDominantLanguageDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDominantLanguageDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEntitiesDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEntityRecognizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEntityRecognizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEntityRecognizerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEntityRecognizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeEventsDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEventsDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventsDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEventsDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeFlywheelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFlywheelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlywheelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlywheelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeFlywheelIterationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeFlywheelIterationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlywheelIterationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlywheelIterationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeKeyPhrasesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeKeyPhrasesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeKeyPhrasesDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeKeyPhrasesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribePiiEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePiiEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePiiEntitiesDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePiiEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSentimentDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeTargetedSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTargetedSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTargetedSentimentDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTargetedSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeTopicsDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTopicsDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTopicsDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTopicsDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectDominantLanguageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectDominantLanguageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectDominantLanguageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectDominantLanguageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectKeyPhrasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectKeyPhrasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectKeyPhrasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectKeyPhrasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectPiiEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectPiiEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectPiiEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectPiiEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectSentimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectSentimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectSentimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectSentimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectSyntaxCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectSyntaxCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectSyntaxResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectSyntaxCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectTargetedSentimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectTargetedSentimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectTargetedSentimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectTargetedSentimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehend#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedLanguageException":
        case "com.amazonaws.comprehend#UnsupportedLanguageException":
            throw await de_UnsupportedLanguageExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ImportModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDatasetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDatasetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDocumentClassificationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDocumentClassificationJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentClassificationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentClassificationJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDocumentClassifiersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDocumentClassifiersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentClassifiersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentClassifiersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDocumentClassifierSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDocumentClassifierSummariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDocumentClassifierSummariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDocumentClassifierSummariesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListDominantLanguageDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDominantLanguageDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDominantLanguageDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDominantLanguageDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEntitiesDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEntitiesDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEntitiesDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntitiesDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEntityRecognizersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEntityRecognizersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEntityRecognizersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntityRecognizersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEntityRecognizerSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEntityRecognizerSummariesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEntityRecognizerSummariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntityRecognizerSummariesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEventsDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEventsDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEventsDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEventsDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListFlywheelIterationHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListFlywheelIterationHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFlywheelIterationHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFlywheelIterationHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListFlywheelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListFlywheelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFlywheelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFlywheelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListKeyPhrasesDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListKeyPhrasesDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListKeyPhrasesDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListKeyPhrasesDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListPiiEntitiesDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPiiEntitiesDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPiiEntitiesDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPiiEntitiesDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListSentimentDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSentimentDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSentimentDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSentimentDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListTargetedSentimentDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTargetedSentimentDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTargetedSentimentDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTargetedSentimentDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListTopicsDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTopicsDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTopicsDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTopicsDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.comprehend#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartDocumentClassificationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDocumentClassificationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDocumentClassificationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartDominantLanguageDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartDominantLanguageDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartDominantLanguageDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartEventsDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartEventsDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartEventsDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartFlywheelIterationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartFlywheelIterationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartFlywheelIterationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartKeyPhrasesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartKeyPhrasesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartKeyPhrasesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartPiiEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartPiiEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartPiiEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartTargetedSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTargetedSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartTargetedSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartTopicsDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTopicsDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartTopicsDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopDominantLanguageDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopDominantLanguageDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopDominantLanguageDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopEventsDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopEventsDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopEventsDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopKeyPhrasesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopKeyPhrasesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopKeyPhrasesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopPiiEntitiesDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopPiiEntitiesDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopPiiEntitiesDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopTargetedSentimentDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTargetedSentimentDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopTargetedSentimentDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "JobNotFoundException":
        case "com.amazonaws.comprehend#JobNotFoundException":
            throw await de_JobNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopTrainingDocumentClassifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTrainingDocumentClassifierCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopTrainingDocumentClassifierCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopTrainingEntityRecognizerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTrainingEntityRecognizerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopTrainingEntityRecognizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.comprehend#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.comprehend#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.comprehend#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagKeysException":
        case "com.amazonaws.comprehend#TooManyTagKeysException":
            throw await de_TooManyTagKeysExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.comprehend#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.comprehend#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.comprehend#ResourceUnavailableException":
            throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateFlywheelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateFlywheelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateFlywheelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateFlywheelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehend#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehend#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "KmsKeyValidationException":
        case "com.amazonaws.comprehend#KmsKeyValidationException":
            throw await de_KmsKeyValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehend#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new BatchSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidFilterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_JobNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new JobNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_KmsKeyValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new KmsKeyValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TextSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagKeysExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagKeysException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedLanguageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedLanguageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ClassifyDocumentRequest = (input, context) => {
    return take(input, {
        Bytes: context.base64Encoder,
        DocumentReaderConfig: _json,
        EndpointArn: [],
        Text: [],
    });
};
const se_CreateDatasetRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatasetName: [],
        DatasetType: [],
        Description: [],
        FlywheelArn: [],
        InputDataConfig: _json,
        Tags: _json,
    });
};
const se_CreateDocumentClassifierRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DocumentClassifierName: [],
        InputDataConfig: _json,
        LanguageCode: [],
        Mode: [],
        ModelKmsKeyId: [],
        ModelPolicy: [],
        OutputDataConfig: _json,
        Tags: _json,
        VersionName: [],
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_CreateEndpointRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DesiredInferenceUnits: [],
        EndpointName: [],
        FlywheelArn: [],
        ModelArn: [],
        Tags: _json,
    });
};
const se_CreateEntityRecognizerRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        LanguageCode: [],
        ModelKmsKeyId: [],
        ModelPolicy: [],
        RecognizerName: [],
        Tags: _json,
        VersionName: [],
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_CreateFlywheelRequest = (input, context) => {
    return take(input, {
        ActiveModelArn: [],
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DataLakeS3Uri: [],
        DataSecurityConfig: _json,
        FlywheelName: [],
        ModelType: [],
        Tags: _json,
        TaskConfig: _json,
    });
};
const se_DatasetFilter = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        DatasetType: [],
        Status: [],
    });
};
const se_DetectEntitiesRequest = (input, context) => {
    return take(input, {
        Bytes: context.base64Encoder,
        DocumentReaderConfig: _json,
        EndpointArn: [],
        LanguageCode: [],
        Text: [],
    });
};
const se_DocumentClassificationJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DocumentClassifierFilter = (input, context) => {
    return take(input, {
        DocumentClassifierName: [],
        Status: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DominantLanguageDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_EndpointFilter = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        ModelArn: [],
        Status: [],
    });
};
const se_EntitiesDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_EntityRecognizerFilter = (input, context) => {
    return take(input, {
        RecognizerName: [],
        Status: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_EventsDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_FlywheelFilter = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
        Status: [],
    });
};
const se_FlywheelIterationFilter = (input, context) => {
    return take(input, {
        CreationTimeAfter: (_) => Math.round(_.getTime() / 1000),
        CreationTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_KeyPhrasesDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListDatasetsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DatasetFilter(_, context),
        FlywheelArn: [],
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDocumentClassificationJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DocumentClassificationJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDocumentClassifiersRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DocumentClassifierFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListDominantLanguageDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_DominantLanguageDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListEndpointsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_EndpointFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListEntitiesDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_EntitiesDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListEntityRecognizersRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_EntityRecognizerFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListEventsDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_EventsDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListFlywheelIterationHistoryRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_FlywheelIterationFilter(_, context),
        FlywheelArn: [],
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListFlywheelsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_FlywheelFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListKeyPhrasesDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_KeyPhrasesDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListPiiEntitiesDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_PiiEntitiesDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListSentimentDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_SentimentDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListTargetedSentimentDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TargetedSentimentDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListTopicsDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TopicsDetectionJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_PiiEntitiesDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_SentimentDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_StartDocumentClassificationJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DocumentClassifierArn: [],
        FlywheelArn: [],
        InputDataConfig: _json,
        JobName: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartDominantLanguageDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartEntitiesDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        EntityRecognizerArn: [],
        FlywheelArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartEventsDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        OutputDataConfig: _json,
        Tags: _json,
        TargetEventTypes: _json,
    });
};
const se_StartKeyPhrasesDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartPiiEntitiesDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        Mode: [],
        OutputDataConfig: _json,
        RedactionConfig: _json,
        Tags: _json,
    });
};
const se_StartSentimentDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartTargetedSentimentDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        LanguageCode: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_StartTopicsDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        NumberOfTopics: [],
        OutputDataConfig: _json,
        Tags: _json,
        VolumeKmsKeyId: [],
        VpcConfig: _json,
    });
};
const se_TargetedSentimentDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TopicsDetectionJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_BatchDetectDominantLanguageItemResult = (output, context) => {
    return take(output, {
        Index: __expectInt32,
        Languages: (_) => de_ListOfDominantLanguages(_, context),
    });
};
const de_BatchDetectDominantLanguageResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectDominantLanguageResult(_, context),
    });
};
const de_BatchDetectEntitiesItemResult = (output, context) => {
    return take(output, {
        Entities: (_) => de_ListOfEntities(_, context),
        Index: __expectInt32,
    });
};
const de_BatchDetectEntitiesResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectEntitiesResult(_, context),
    });
};
const de_BatchDetectKeyPhrasesItemResult = (output, context) => {
    return take(output, {
        Index: __expectInt32,
        KeyPhrases: (_) => de_ListOfKeyPhrases(_, context),
    });
};
const de_BatchDetectKeyPhrasesResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectKeyPhrasesResult(_, context),
    });
};
const de_BatchDetectSentimentItemResult = (output, context) => {
    return take(output, {
        Index: __expectInt32,
        Sentiment: __expectString,
        SentimentScore: (_) => de_SentimentScore(_, context),
    });
};
const de_BatchDetectSentimentResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectSentimentResult(_, context),
    });
};
const de_BatchDetectSyntaxItemResult = (output, context) => {
    return take(output, {
        Index: __expectInt32,
        SyntaxTokens: (_) => de_ListOfSyntaxTokens(_, context),
    });
};
const de_BatchDetectSyntaxResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectSyntaxResult(_, context),
    });
};
const de_BatchDetectTargetedSentimentItemResult = (output, context) => {
    return take(output, {
        Entities: (_) => de_ListOfTargetedSentimentEntities(_, context),
        Index: __expectInt32,
    });
};
const de_BatchDetectTargetedSentimentResponse = (output, context) => {
    return take(output, {
        ErrorList: _json,
        ResultList: (_) => de_ListOfDetectTargetedSentimentResult(_, context),
    });
};
const de_Block = (output, context) => {
    return take(output, {
        BlockType: __expectString,
        Geometry: (_) => de_Geometry(_, context),
        Id: __expectString,
        Page: __expectInt32,
        Relationships: _json,
        Text: __expectString,
    });
};
const de_BoundingBox = (output, context) => {
    return take(output, {
        Height: __limitedParseFloat32,
        Left: __limitedParseFloat32,
        Top: __limitedParseFloat32,
        Width: __limitedParseFloat32,
    });
};
const de_ClassifierEvaluationMetrics = (output, context) => {
    return take(output, {
        Accuracy: __limitedParseDouble,
        F1Score: __limitedParseDouble,
        HammingLoss: __limitedParseDouble,
        MicroF1Score: __limitedParseDouble,
        MicroPrecision: __limitedParseDouble,
        MicroRecall: __limitedParseDouble,
        Precision: __limitedParseDouble,
        Recall: __limitedParseDouble,
    });
};
const de_ClassifierMetadata = (output, context) => {
    return take(output, {
        EvaluationMetrics: (_) => de_ClassifierEvaluationMetrics(_, context),
        NumberOfLabels: __expectInt32,
        NumberOfTestDocuments: __expectInt32,
        NumberOfTrainedDocuments: __expectInt32,
    });
};
const de_ClassifyDocumentResponse = (output, context) => {
    return take(output, {
        Classes: (_) => de_ListOfClasses(_, context),
        DocumentMetadata: _json,
        DocumentType: _json,
        Errors: _json,
        Labels: (_) => de_ListOfLabels(_, context),
        Warnings: _json,
    });
};
const de_ContainsPiiEntitiesResponse = (output, context) => {
    return take(output, {
        Labels: (_) => de_ListOfEntityLabels(_, context),
    });
};
const de_DatasetProperties = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetName: __expectString,
        DatasetS3Uri: __expectString,
        DatasetType: __expectString,
        Description: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        NumberOfDocuments: __expectLong,
        Status: __expectString,
    });
};
const de_DatasetPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetProperties(entry, context);
    });
    return retVal;
};
const de_DescribeDatasetResponse = (output, context) => {
    return take(output, {
        DatasetProperties: (_) => de_DatasetProperties(_, context),
    });
};
const de_DescribeDocumentClassificationJobResponse = (output, context) => {
    return take(output, {
        DocumentClassificationJobProperties: (_) => de_DocumentClassificationJobProperties(_, context),
    });
};
const de_DescribeDocumentClassifierResponse = (output, context) => {
    return take(output, {
        DocumentClassifierProperties: (_) => de_DocumentClassifierProperties(_, context),
    });
};
const de_DescribeDominantLanguageDetectionJobResponse = (output, context) => {
    return take(output, {
        DominantLanguageDetectionJobProperties: (_) => de_DominantLanguageDetectionJobProperties(_, context),
    });
};
const de_DescribeEndpointResponse = (output, context) => {
    return take(output, {
        EndpointProperties: (_) => de_EndpointProperties(_, context),
    });
};
const de_DescribeEntitiesDetectionJobResponse = (output, context) => {
    return take(output, {
        EntitiesDetectionJobProperties: (_) => de_EntitiesDetectionJobProperties(_, context),
    });
};
const de_DescribeEntityRecognizerResponse = (output, context) => {
    return take(output, {
        EntityRecognizerProperties: (_) => de_EntityRecognizerProperties(_, context),
    });
};
const de_DescribeEventsDetectionJobResponse = (output, context) => {
    return take(output, {
        EventsDetectionJobProperties: (_) => de_EventsDetectionJobProperties(_, context),
    });
};
const de_DescribeFlywheelIterationResponse = (output, context) => {
    return take(output, {
        FlywheelIterationProperties: (_) => de_FlywheelIterationProperties(_, context),
    });
};
const de_DescribeFlywheelResponse = (output, context) => {
    return take(output, {
        FlywheelProperties: (_) => de_FlywheelProperties(_, context),
    });
};
const de_DescribeKeyPhrasesDetectionJobResponse = (output, context) => {
    return take(output, {
        KeyPhrasesDetectionJobProperties: (_) => de_KeyPhrasesDetectionJobProperties(_, context),
    });
};
const de_DescribePiiEntitiesDetectionJobResponse = (output, context) => {
    return take(output, {
        PiiEntitiesDetectionJobProperties: (_) => de_PiiEntitiesDetectionJobProperties(_, context),
    });
};
const de_DescribeResourcePolicyResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyRevisionId: __expectString,
        ResourcePolicy: __expectString,
    });
};
const de_DescribeSentimentDetectionJobResponse = (output, context) => {
    return take(output, {
        SentimentDetectionJobProperties: (_) => de_SentimentDetectionJobProperties(_, context),
    });
};
const de_DescribeTargetedSentimentDetectionJobResponse = (output, context) => {
    return take(output, {
        TargetedSentimentDetectionJobProperties: (_) => de_TargetedSentimentDetectionJobProperties(_, context),
    });
};
const de_DescribeTopicsDetectionJobResponse = (output, context) => {
    return take(output, {
        TopicsDetectionJobProperties: (_) => de_TopicsDetectionJobProperties(_, context),
    });
};
const de_DetectDominantLanguageResponse = (output, context) => {
    return take(output, {
        Languages: (_) => de_ListOfDominantLanguages(_, context),
    });
};
const de_DetectEntitiesResponse = (output, context) => {
    return take(output, {
        Blocks: (_) => de_ListOfBlocks(_, context),
        DocumentMetadata: _json,
        DocumentType: _json,
        Entities: (_) => de_ListOfEntities(_, context),
        Errors: _json,
    });
};
const de_DetectKeyPhrasesResponse = (output, context) => {
    return take(output, {
        KeyPhrases: (_) => de_ListOfKeyPhrases(_, context),
    });
};
const de_DetectPiiEntitiesResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_ListOfPiiEntities(_, context),
    });
};
const de_DetectSentimentResponse = (output, context) => {
    return take(output, {
        Sentiment: __expectString,
        SentimentScore: (_) => de_SentimentScore(_, context),
    });
};
const de_DetectSyntaxResponse = (output, context) => {
    return take(output, {
        SyntaxTokens: (_) => de_ListOfSyntaxTokens(_, context),
    });
};
const de_DetectTargetedSentimentResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_ListOfTargetedSentimentEntities(_, context),
    });
};
const de_DocumentClass = (output, context) => {
    return take(output, {
        Name: __expectString,
        Page: __expectInt32,
        Score: __limitedParseFloat32,
    });
};
const de_DocumentClassificationJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        DocumentClassifierArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FlywheelArn: __expectString,
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_DocumentClassificationJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentClassificationJobProperties(entry, context);
    });
    return retVal;
};
const de_DocumentClassifierProperties = (output, context) => {
    return take(output, {
        ClassifierMetadata: (_) => de_ClassifierMetadata(_, context),
        DataAccessRoleArn: __expectString,
        DocumentClassifierArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FlywheelArn: __expectString,
        InputDataConfig: _json,
        LanguageCode: __expectString,
        Message: __expectString,
        Mode: __expectString,
        ModelKmsKeyId: __expectString,
        OutputDataConfig: _json,
        SourceModelArn: __expectString,
        Status: __expectString,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionName: __expectString,
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_DocumentClassifierPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentClassifierProperties(entry, context);
    });
    return retVal;
};
const de_DocumentClassifierSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentClassifierSummary(entry, context);
    });
    return retVal;
};
const de_DocumentClassifierSummary = (output, context) => {
    return take(output, {
        DocumentClassifierName: __expectString,
        LatestVersionCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestVersionName: __expectString,
        LatestVersionStatus: __expectString,
        NumberOfVersions: __expectInt32,
    });
};
const de_DocumentLabel = (output, context) => {
    return take(output, {
        Name: __expectString,
        Page: __expectInt32,
        Score: __limitedParseFloat32,
    });
};
const de_DominantLanguage = (output, context) => {
    return take(output, {
        LanguageCode: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_DominantLanguageDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_DominantLanguageDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DominantLanguageDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_EndpointProperties = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentInferenceUnits: __expectInt32,
        DataAccessRoleArn: __expectString,
        DesiredDataAccessRoleArn: __expectString,
        DesiredInferenceUnits: __expectInt32,
        DesiredModelArn: __expectString,
        EndpointArn: __expectString,
        FlywheelArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        ModelArn: __expectString,
        Status: __expectString,
    });
};
const de_EndpointPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointProperties(entry, context);
    });
    return retVal;
};
const de_EntitiesDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EntityRecognizerArn: __expectString,
        FlywheelArn: __expectString,
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_EntitiesDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntitiesDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_Entity = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        BlockReferences: _json,
        EndOffset: __expectInt32,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Type: __expectString,
    });
};
const de_EntityLabel = (output, context) => {
    return take(output, {
        Name: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_EntityRecognizerEvaluationMetrics = (output, context) => {
    return take(output, {
        F1Score: __limitedParseDouble,
        Precision: __limitedParseDouble,
        Recall: __limitedParseDouble,
    });
};
const de_EntityRecognizerMetadata = (output, context) => {
    return take(output, {
        EntityTypes: (_) => de_EntityRecognizerMetadataEntityTypesList(_, context),
        EvaluationMetrics: (_) => de_EntityRecognizerEvaluationMetrics(_, context),
        NumberOfTestDocuments: __expectInt32,
        NumberOfTrainedDocuments: __expectInt32,
    });
};
const de_EntityRecognizerMetadataEntityTypesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntityRecognizerMetadataEntityTypesListItem(entry, context);
    });
    return retVal;
};
const de_EntityRecognizerMetadataEntityTypesListItem = (output, context) => {
    return take(output, {
        EvaluationMetrics: (_) => de_EntityTypesEvaluationMetrics(_, context),
        NumberOfTrainMentions: __expectInt32,
        Type: __expectString,
    });
};
const de_EntityRecognizerProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EntityRecognizerArn: __expectString,
        FlywheelArn: __expectString,
        InputDataConfig: _json,
        LanguageCode: __expectString,
        Message: __expectString,
        ModelKmsKeyId: __expectString,
        OutputDataConfig: _json,
        RecognizerMetadata: (_) => de_EntityRecognizerMetadata(_, context),
        SourceModelArn: __expectString,
        Status: __expectString,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionName: __expectString,
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_EntityRecognizerPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntityRecognizerProperties(entry, context);
    });
    return retVal;
};
const de_EntityRecognizerSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntityRecognizerSummary(entry, context);
    });
    return retVal;
};
const de_EntityRecognizerSummary = (output, context) => {
    return take(output, {
        LatestVersionCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestVersionName: __expectString,
        LatestVersionStatus: __expectString,
        NumberOfVersions: __expectInt32,
        RecognizerName: __expectString,
    });
};
const de_EntityTypesEvaluationMetrics = (output, context) => {
    return take(output, {
        F1Score: __limitedParseDouble,
        Precision: __limitedParseDouble,
        Recall: __limitedParseDouble,
    });
};
const de_EventsDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TargetEventTypes: _json,
    });
};
const de_EventsDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventsDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_FlywheelIterationProperties = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluatedModelArn: __expectString,
        EvaluatedModelMetrics: (_) => de_FlywheelModelEvaluationMetrics(_, context),
        EvaluationManifestS3Prefix: __expectString,
        FlywheelArn: __expectString,
        FlywheelIterationId: __expectString,
        Message: __expectString,
        Status: __expectString,
        TrainedModelArn: __expectString,
        TrainedModelMetrics: (_) => de_FlywheelModelEvaluationMetrics(_, context),
    });
};
const de_FlywheelIterationPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlywheelIterationProperties(entry, context);
    });
    return retVal;
};
const de_FlywheelModelEvaluationMetrics = (output, context) => {
    return take(output, {
        AverageAccuracy: __limitedParseDouble,
        AverageF1Score: __limitedParseDouble,
        AveragePrecision: __limitedParseDouble,
        AverageRecall: __limitedParseDouble,
    });
};
const de_FlywheelProperties = (output, context) => {
    return take(output, {
        ActiveModelArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataAccessRoleArn: __expectString,
        DataLakeS3Uri: __expectString,
        DataSecurityConfig: _json,
        FlywheelArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestFlywheelIteration: __expectString,
        Message: __expectString,
        ModelType: __expectString,
        Status: __expectString,
        TaskConfig: _json,
    });
};
const de_FlywheelSummary = (output, context) => {
    return take(output, {
        ActiveModelArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataLakeS3Uri: __expectString,
        FlywheelArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestFlywheelIteration: __expectString,
        Message: __expectString,
        ModelType: __expectString,
        Status: __expectString,
    });
};
const de_FlywheelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlywheelSummary(entry, context);
    });
    return retVal;
};
const de_Geometry = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Polygon: (_) => de_Polygon(_, context),
    });
};
const de_KeyPhrase = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        EndOffset: __expectInt32,
        Score: __limitedParseFloat32,
        Text: __expectString,
    });
};
const de_KeyPhrasesDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_KeyPhrasesDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPhrasesDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_ListDatasetsResponse = (output, context) => {
    return take(output, {
        DatasetPropertiesList: (_) => de_DatasetPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDocumentClassificationJobsResponse = (output, context) => {
    return take(output, {
        DocumentClassificationJobPropertiesList: (_) => de_DocumentClassificationJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDocumentClassifiersResponse = (output, context) => {
    return take(output, {
        DocumentClassifierPropertiesList: (_) => de_DocumentClassifierPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDocumentClassifierSummariesResponse = (output, context) => {
    return take(output, {
        DocumentClassifierSummariesList: (_) => de_DocumentClassifierSummariesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListDominantLanguageDetectionJobsResponse = (output, context) => {
    return take(output, {
        DominantLanguageDetectionJobPropertiesList: (_) => de_DominantLanguageDetectionJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEndpointsResponse = (output, context) => {
    return take(output, {
        EndpointPropertiesList: (_) => de_EndpointPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEntitiesDetectionJobsResponse = (output, context) => {
    return take(output, {
        EntitiesDetectionJobPropertiesList: (_) => de_EntitiesDetectionJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEntityRecognizersResponse = (output, context) => {
    return take(output, {
        EntityRecognizerPropertiesList: (_) => de_EntityRecognizerPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEntityRecognizerSummariesResponse = (output, context) => {
    return take(output, {
        EntityRecognizerSummariesList: (_) => de_EntityRecognizerSummariesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListEventsDetectionJobsResponse = (output, context) => {
    return take(output, {
        EventsDetectionJobPropertiesList: (_) => de_EventsDetectionJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListFlywheelIterationHistoryResponse = (output, context) => {
    return take(output, {
        FlywheelIterationPropertiesList: (_) => de_FlywheelIterationPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListFlywheelsResponse = (output, context) => {
    return take(output, {
        FlywheelSummaryList: (_) => de_FlywheelSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListKeyPhrasesDetectionJobsResponse = (output, context) => {
    return take(output, {
        KeyPhrasesDetectionJobPropertiesList: (_) => de_KeyPhrasesDetectionJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListOfBlocks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Block(entry, context);
    });
    return retVal;
};
const de_ListOfClasses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentClass(entry, context);
    });
    return retVal;
};
const de_ListOfDetectDominantLanguageResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectDominantLanguageItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDetectEntitiesResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectEntitiesItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDetectKeyPhrasesResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectKeyPhrasesItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDetectSentimentResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectSentimentItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDetectSyntaxResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectSyntaxItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDetectTargetedSentimentResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDetectTargetedSentimentItemResult(entry, context);
    });
    return retVal;
};
const de_ListOfDominantLanguages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DominantLanguage(entry, context);
    });
    return retVal;
};
const de_ListOfEntities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Entity(entry, context);
    });
    return retVal;
};
const de_ListOfEntityLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EntityLabel(entry, context);
    });
    return retVal;
};
const de_ListOfKeyPhrases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPhrase(entry, context);
    });
    return retVal;
};
const de_ListOfLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DocumentLabel(entry, context);
    });
    return retVal;
};
const de_ListOfMentions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetedSentimentMention(entry, context);
    });
    return retVal;
};
const de_ListOfPiiEntities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PiiEntity(entry, context);
    });
    return retVal;
};
const de_ListOfSyntaxTokens = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SyntaxToken(entry, context);
    });
    return retVal;
};
const de_ListOfTargetedSentimentEntities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetedSentimentEntity(entry, context);
    });
    return retVal;
};
const de_ListPiiEntitiesDetectionJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PiiEntitiesDetectionJobPropertiesList: (_) => de_PiiEntitiesDetectionJobPropertiesList(_, context),
    });
};
const de_ListSentimentDetectionJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SentimentDetectionJobPropertiesList: (_) => de_SentimentDetectionJobPropertiesList(_, context),
    });
};
const de_ListTargetedSentimentDetectionJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TargetedSentimentDetectionJobPropertiesList: (_) => de_TargetedSentimentDetectionJobPropertiesList(_, context),
    });
};
const de_ListTopicsDetectionJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TopicsDetectionJobPropertiesList: (_) => de_TopicsDetectionJobPropertiesList(_, context),
    });
};
const de_MentionSentiment = (output, context) => {
    return take(output, {
        Sentiment: __expectString,
        SentimentScore: (_) => de_SentimentScore(_, context),
    });
};
const de_PartOfSpeechTag = (output, context) => {
    return take(output, {
        Score: __limitedParseFloat32,
        Tag: __expectString,
    });
};
const de_PiiEntitiesDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        Mode: __expectString,
        OutputDataConfig: _json,
        RedactionConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PiiEntitiesDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PiiEntitiesDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_PiiEntity = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        EndOffset: __expectInt32,
        Score: __limitedParseFloat32,
        Type: __expectString,
    });
};
const de_Point = (output, context) => {
    return take(output, {
        X: __limitedParseFloat32,
        Y: __limitedParseFloat32,
    });
};
const de_Polygon = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Point(entry, context);
    });
    return retVal;
};
const de_SentimentDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_SentimentDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SentimentDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_SentimentScore = (output, context) => {
    return take(output, {
        Mixed: __limitedParseFloat32,
        Negative: __limitedParseFloat32,
        Neutral: __limitedParseFloat32,
        Positive: __limitedParseFloat32,
    });
};
const de_SyntaxToken = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        EndOffset: __expectInt32,
        PartOfSpeech: (_) => de_PartOfSpeechTag(_, context),
        Text: __expectString,
        TokenId: __expectInt32,
    });
};
const de_TargetedSentimentDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        LanguageCode: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_TargetedSentimentDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetedSentimentDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_TargetedSentimentEntity = (output, context) => {
    return take(output, {
        DescriptiveMentionIndex: _json,
        Mentions: (_) => de_ListOfMentions(_, context),
    });
};
const de_TargetedSentimentMention = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        EndOffset: __expectInt32,
        GroupScore: __limitedParseFloat32,
        MentionSentiment: (_) => de_MentionSentiment(_, context),
        Score: __limitedParseFloat32,
        Text: __expectString,
        Type: __expectString,
    });
};
const de_TopicsDetectionJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobArn: __expectString,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        Message: __expectString,
        NumberOfTopics: __expectInt32,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VolumeKmsKeyId: __expectString,
        VpcConfig: _json,
    });
};
const de_TopicsDetectionJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TopicsDetectionJobProperties(entry, context);
    });
    return retVal;
};
const de_UpdateFlywheelResponse = (output, context) => {
    return take(output, {
        FlywheelProperties: (_) => de_FlywheelProperties(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Comprehend_20171127.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
