"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchDetectDominantLanguageRequestFilterSensitiveLog = exports.InvalidFilterException = exports.PiiEntitiesDetectionMaskMode = exports.PiiEntitiesDetectionMode = exports.FlywheelIterationStatus = exports.FlywheelStatus = exports.EndpointStatus = exports.ModelStatus = exports.JobNotFoundException = exports.JobStatus = exports.DatasetStatus = exports.ModelType = exports.EntityRecognizerDataFormat = exports.KmsKeyValidationException = exports.DocumentClassifierMode = exports.DocumentClassifierDocumentTypeFormat = exports.DocumentClassifierDataFormat = exports.TooManyTagsException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.ResourceLimitExceededException = exports.ResourceInUseException = exports.InputFormat = exports.DatasetDataFormat = exports.DatasetType = exports.PiiEntityType = exports.ResourceUnavailableException = exports.PageBasedWarningCode = exports.PageBasedErrorCode = exports.DocumentType = exports.DocumentReadFeatureTypes = exports.DocumentReadMode = exports.DocumentReadAction = exports.RelationshipType = exports.BlockType = exports.TargetedSentimentEntityType = exports.PartOfSpeechTagType = exports.SyntaxLanguageCode = exports.SentimentType = exports.UnsupportedLanguageException = exports.EntityType = exports.LanguageCode = exports.TextSizeLimitExceededException = exports.InvalidRequestException = exports.InvalidRequestReason = exports.InvalidRequestDetailReason = exports.InternalServerException = exports.BatchSizeLimitExceededException = exports.Split = exports.AugmentedManifestsDocumentTypeFormat = void 0;
exports.ListEntityRecognizersResponseFilterSensitiveLog = exports.ListDocumentClassifiersResponseFilterSensitiveLog = exports.DetectTargetedSentimentResponseFilterSensitiveLog = exports.DetectTargetedSentimentRequestFilterSensitiveLog = exports.DetectSyntaxResponseFilterSensitiveLog = exports.DetectSyntaxRequestFilterSensitiveLog = exports.DetectSentimentResponseFilterSensitiveLog = exports.DetectSentimentRequestFilterSensitiveLog = exports.DetectKeyPhrasesResponseFilterSensitiveLog = exports.DetectKeyPhrasesRequestFilterSensitiveLog = exports.DetectEntitiesResponseFilterSensitiveLog = exports.DetectEntitiesRequestFilterSensitiveLog = exports.DetectDominantLanguageResponseFilterSensitiveLog = exports.DetectDominantLanguageRequestFilterSensitiveLog = exports.DescribeEntityRecognizerResponseFilterSensitiveLog = exports.EntityRecognizerPropertiesFilterSensitiveLog = exports.EntityRecognizerMetadataFilterSensitiveLog = exports.DescribeDocumentClassifierResponseFilterSensitiveLog = exports.DocumentClassifierPropertiesFilterSensitiveLog = exports.ClassifyDocumentResponseFilterSensitiveLog = exports.ClassifyDocumentRequestFilterSensitiveLog = exports.ClassifierMetadataFilterSensitiveLog = exports.BatchDetectTargetedSentimentResponseFilterSensitiveLog = exports.BatchDetectTargetedSentimentRequestFilterSensitiveLog = exports.BatchDetectSyntaxResponseFilterSensitiveLog = exports.BatchDetectSyntaxRequestFilterSensitiveLog = exports.BatchDetectSentimentResponseFilterSensitiveLog = exports.BatchDetectSentimentRequestFilterSensitiveLog = exports.BatchDetectKeyPhrasesResponseFilterSensitiveLog = exports.BatchDetectKeyPhrasesRequestFilterSensitiveLog = exports.BatchDetectEntitiesResponseFilterSensitiveLog = exports.BatchDetectEntitiesRequestFilterSensitiveLog = exports.BatchDetectDominantLanguageResponseFilterSensitiveLog = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const ComprehendServiceException_1 = require("./ComprehendServiceException");
exports.AugmentedManifestsDocumentTypeFormat = {
    PLAIN_TEXT_DOCUMENT: "PLAIN_TEXT_DOCUMENT",
    SEMI_STRUCTURED_DOCUMENT: "SEMI_STRUCTURED_DOCUMENT",
};
exports.Split = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
class BatchSizeLimitExceededException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "BatchSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "BatchSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BatchSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.BatchSizeLimitExceededException = BatchSizeLimitExceededException;
class InternalServerException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
exports.InvalidRequestDetailReason = {
    DOCUMENT_SIZE_EXCEEDED: "DOCUMENT_SIZE_EXCEEDED",
    PAGE_LIMIT_EXCEEDED: "PAGE_LIMIT_EXCEEDED",
    TEXTRACT_ACCESS_DENIED: "TEXTRACT_ACCESS_DENIED",
    UNSUPPORTED_DOC_TYPE: "UNSUPPORTED_DOC_TYPE",
};
exports.InvalidRequestReason = {
    INVALID_DOCUMENT: "INVALID_DOCUMENT",
};
class InvalidRequestException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Detail = opts.Detail;
    }
}
exports.InvalidRequestException = InvalidRequestException;
class TextSizeLimitExceededException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.TextSizeLimitExceededException = TextSizeLimitExceededException;
exports.LanguageCode = {
    AR: "ar",
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    HI: "hi",
    IT: "it",
    JA: "ja",
    KO: "ko",
    PT: "pt",
    ZH: "zh",
    ZH_TW: "zh-TW",
};
exports.EntityType = {
    COMMERCIAL_ITEM: "COMMERCIAL_ITEM",
    DATE: "DATE",
    EVENT: "EVENT",
    LOCATION: "LOCATION",
    ORGANIZATION: "ORGANIZATION",
    OTHER: "OTHER",
    PERSON: "PERSON",
    QUANTITY: "QUANTITY",
    TITLE: "TITLE",
};
class UnsupportedLanguageException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedLanguageException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedLanguageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedLanguageException.prototype);
        this.Message = opts.Message;
    }
}
exports.UnsupportedLanguageException = UnsupportedLanguageException;
exports.SentimentType = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
exports.SyntaxLanguageCode = {
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    IT: "it",
    PT: "pt",
};
exports.PartOfSpeechTagType = {
    ADJ: "ADJ",
    ADP: "ADP",
    ADV: "ADV",
    AUX: "AUX",
    CCONJ: "CCONJ",
    CONJ: "CONJ",
    DET: "DET",
    INTJ: "INTJ",
    NOUN: "NOUN",
    NUM: "NUM",
    O: "O",
    PART: "PART",
    PRON: "PRON",
    PROPN: "PROPN",
    PUNCT: "PUNCT",
    SCONJ: "SCONJ",
    SYM: "SYM",
    VERB: "VERB",
};
exports.TargetedSentimentEntityType = {
    ATTRIBUTE: "ATTRIBUTE",
    BOOK: "BOOK",
    BRAND: "BRAND",
    COMMERCIAL_ITEM: "COMMERCIAL_ITEM",
    DATE: "DATE",
    EVENT: "EVENT",
    FACILITY: "FACILITY",
    GAME: "GAME",
    LOCATION: "LOCATION",
    MOVIE: "MOVIE",
    MUSIC: "MUSIC",
    ORGANIZATION: "ORGANIZATION",
    OTHER: "OTHER",
    PERSON: "PERSON",
    PERSONAL_TITLE: "PERSONAL_TITLE",
    QUANTITY: "QUANTITY",
    SOFTWARE: "SOFTWARE",
};
exports.BlockType = {
    LINE: "LINE",
    WORD: "WORD",
};
exports.RelationshipType = {
    CHILD: "CHILD",
};
exports.DocumentReadAction = {
    TEXTRACT_ANALYZE_DOCUMENT: "TEXTRACT_ANALYZE_DOCUMENT",
    TEXTRACT_DETECT_DOCUMENT_TEXT: "TEXTRACT_DETECT_DOCUMENT_TEXT",
};
exports.DocumentReadMode = {
    FORCE_DOCUMENT_READ_ACTION: "FORCE_DOCUMENT_READ_ACTION",
    SERVICE_DEFAULT: "SERVICE_DEFAULT",
};
exports.DocumentReadFeatureTypes = {
    FORMS: "FORMS",
    TABLES: "TABLES",
};
exports.DocumentType = {
    IMAGE: "IMAGE",
    MS_WORD: "MS_WORD",
    NATIVE_PDF: "NATIVE_PDF",
    PLAIN_TEXT: "PLAIN_TEXT",
    SCANNED_PDF: "SCANNED_PDF",
    TEXTRACT_ANALYZE_DOCUMENT_JSON: "TEXTRACT_ANALYZE_DOCUMENT_JSON",
    TEXTRACT_DETECT_DOCUMENT_TEXT_JSON: "TEXTRACT_DETECT_DOCUMENT_TEXT_JSON",
};
exports.PageBasedErrorCode = {
    INTERNAL_SERVER_ERROR: "INTERNAL_SERVER_ERROR",
    PAGE_CHARACTERS_EXCEEDED: "PAGE_CHARACTERS_EXCEEDED",
    PAGE_SIZE_EXCEEDED: "PAGE_SIZE_EXCEEDED",
    TEXTRACT_BAD_PAGE: "TEXTRACT_BAD_PAGE",
    TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED: "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED",
};
exports.PageBasedWarningCode = {
    INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL: "INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL",
    INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL: "INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL",
};
class ResourceUnavailableException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceUnavailableException = ResourceUnavailableException;
exports.PiiEntityType = {
    ADDRESS: "ADDRESS",
    AGE: "AGE",
    ALL: "ALL",
    AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
    AWS_SECRET_KEY: "AWS_SECRET_KEY",
    BANK_ACCOUNT_NUMBER: "BANK_ACCOUNT_NUMBER",
    BANK_ROUTING: "BANK_ROUTING",
    CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
    CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
    CREDIT_DEBIT_CVV: "CREDIT_DEBIT_CVV",
    CREDIT_DEBIT_EXPIRY: "CREDIT_DEBIT_EXPIRY",
    CREDIT_DEBIT_NUMBER: "CREDIT_DEBIT_NUMBER",
    DATE_TIME: "DATE_TIME",
    DRIVER_ID: "DRIVER_ID",
    EMAIL: "EMAIL",
    INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
    IN_AADHAAR: "IN_AADHAAR",
    IN_NREGA: "IN_NREGA",
    IN_PERMANENT_ACCOUNT_NUMBER: "IN_PERMANENT_ACCOUNT_NUMBER",
    IN_VOTER_NUMBER: "IN_VOTER_NUMBER",
    IP_ADDRESS: "IP_ADDRESS",
    LICENSE_PLATE: "LICENSE_PLATE",
    MAC_ADDRESS: "MAC_ADDRESS",
    NAME: "NAME",
    PASSPORT_NUMBER: "PASSPORT_NUMBER",
    PASSWORD: "PASSWORD",
    PHONE: "PHONE",
    PIN: "PIN",
    SSN: "SSN",
    SWIFT_CODE: "SWIFT_CODE",
    UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
    UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
    URL: "URL",
    USERNAME: "USERNAME",
    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
    VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER",
};
exports.DatasetType = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
exports.DatasetDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
exports.InputFormat = {
    ONE_DOC_PER_FILE: "ONE_DOC_PER_FILE",
    ONE_DOC_PER_LINE: "ONE_DOC_PER_LINE",
};
class ResourceInUseException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceInUseException = ResourceInUseException;
class ResourceLimitExceededException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceLimitExceededException = ResourceLimitExceededException;
class ResourceNotFoundException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class TooManyRequestsException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class TooManyTagsException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
    }
}
exports.TooManyTagsException = TooManyTagsException;
exports.DocumentClassifierDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
exports.DocumentClassifierDocumentTypeFormat = {
    PLAIN_TEXT_DOCUMENT: "PLAIN_TEXT_DOCUMENT",
    SEMI_STRUCTURED_DOCUMENT: "SEMI_STRUCTURED_DOCUMENT",
};
exports.DocumentClassifierMode = {
    MULTI_CLASS: "MULTI_CLASS",
    MULTI_LABEL: "MULTI_LABEL",
};
class KmsKeyValidationException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "KmsKeyValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "KmsKeyValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, KmsKeyValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.KmsKeyValidationException = KmsKeyValidationException;
exports.EntityRecognizerDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
exports.ModelType = {
    DOCUMENT_CLASSIFIER: "DOCUMENT_CLASSIFIER",
    ENTITY_RECOGNIZER: "ENTITY_RECOGNIZER",
};
exports.DatasetStatus = {
    COMPLETED: "COMPLETED",
    CREATING: "CREATING",
    FAILED: "FAILED",
};
exports.JobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
class JobNotFoundException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "JobNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "JobNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, JobNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.JobNotFoundException = JobNotFoundException;
exports.ModelStatus = {
    DELETING: "DELETING",
    IN_ERROR: "IN_ERROR",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
    TRAINED: "TRAINED",
    TRAINED_WITH_WARNING: "TRAINED_WITH_WARNING",
    TRAINING: "TRAINING",
};
exports.EndpointStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    IN_SERVICE: "IN_SERVICE",
    UPDATING: "UPDATING",
};
exports.FlywheelStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
exports.FlywheelIterationStatus = {
    COMPLETED: "COMPLETED",
    EVALUATING: "EVALUATING",
    FAILED: "FAILED",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    TRAINING: "TRAINING",
};
exports.PiiEntitiesDetectionMode = {
    ONLY_OFFSETS: "ONLY_OFFSETS",
    ONLY_REDACTION: "ONLY_REDACTION",
};
exports.PiiEntitiesDetectionMaskMode = {
    MASK: "MASK",
    REPLACE_WITH_PII_ENTITY_TYPE: "REPLACE_WITH_PII_ENTITY_TYPE",
};
class InvalidFilterException extends ComprehendServiceException_1.ComprehendServiceException {
    constructor(opts) {
        super({
            name: "InvalidFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidFilterException = InvalidFilterException;
const BatchDetectDominantLanguageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectDominantLanguageRequestFilterSensitiveLog = BatchDetectDominantLanguageRequestFilterSensitiveLog;
const BatchDetectDominantLanguageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectDominantLanguageResponseFilterSensitiveLog = BatchDetectDominantLanguageResponseFilterSensitiveLog;
const BatchDetectEntitiesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectEntitiesRequestFilterSensitiveLog = BatchDetectEntitiesRequestFilterSensitiveLog;
const BatchDetectEntitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectEntitiesResponseFilterSensitiveLog = BatchDetectEntitiesResponseFilterSensitiveLog;
const BatchDetectKeyPhrasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectKeyPhrasesRequestFilterSensitiveLog = BatchDetectKeyPhrasesRequestFilterSensitiveLog;
const BatchDetectKeyPhrasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectKeyPhrasesResponseFilterSensitiveLog = BatchDetectKeyPhrasesResponseFilterSensitiveLog;
const BatchDetectSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectSentimentRequestFilterSensitiveLog = BatchDetectSentimentRequestFilterSensitiveLog;
const BatchDetectSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectSentimentResponseFilterSensitiveLog = BatchDetectSentimentResponseFilterSensitiveLog;
const BatchDetectSyntaxRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectSyntaxRequestFilterSensitiveLog = BatchDetectSyntaxRequestFilterSensitiveLog;
const BatchDetectSyntaxResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectSyntaxResponseFilterSensitiveLog = BatchDetectSyntaxResponseFilterSensitiveLog;
const BatchDetectTargetedSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: smithy_client_1.SENSITIVE_STRING }),
});
exports.BatchDetectTargetedSentimentRequestFilterSensitiveLog = BatchDetectTargetedSentimentRequestFilterSensitiveLog;
const BatchDetectTargetedSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDetectTargetedSentimentResponseFilterSensitiveLog = BatchDetectTargetedSentimentResponseFilterSensitiveLog;
const ClassifierMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClassifierMetadataFilterSensitiveLog = ClassifierMetadataFilterSensitiveLog;
const ClassifyDocumentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.ClassifyDocumentRequestFilterSensitiveLog = ClassifyDocumentRequestFilterSensitiveLog;
const ClassifyDocumentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClassifyDocumentResponseFilterSensitiveLog = ClassifyDocumentResponseFilterSensitiveLog;
const DocumentClassifierPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClassifierMetadata && { ClassifierMetadata: smithy_client_1.SENSITIVE_STRING }),
});
exports.DocumentClassifierPropertiesFilterSensitiveLog = DocumentClassifierPropertiesFilterSensitiveLog;
const DescribeDocumentClassifierResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DocumentClassifierProperties && {
        DocumentClassifierProperties: (0, exports.DocumentClassifierPropertiesFilterSensitiveLog)(obj.DocumentClassifierProperties),
    }),
});
exports.DescribeDocumentClassifierResponseFilterSensitiveLog = DescribeDocumentClassifierResponseFilterSensitiveLog;
const EntityRecognizerMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EntityRecognizerMetadataFilterSensitiveLog = EntityRecognizerMetadataFilterSensitiveLog;
const EntityRecognizerPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecognizerMetadata && { RecognizerMetadata: smithy_client_1.SENSITIVE_STRING }),
});
exports.EntityRecognizerPropertiesFilterSensitiveLog = EntityRecognizerPropertiesFilterSensitiveLog;
const DescribeEntityRecognizerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EntityRecognizerProperties && {
        EntityRecognizerProperties: (0, exports.EntityRecognizerPropertiesFilterSensitiveLog)(obj.EntityRecognizerProperties),
    }),
});
exports.DescribeEntityRecognizerResponseFilterSensitiveLog = DescribeEntityRecognizerResponseFilterSensitiveLog;
const DetectDominantLanguageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectDominantLanguageRequestFilterSensitiveLog = DetectDominantLanguageRequestFilterSensitiveLog;
const DetectDominantLanguageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectDominantLanguageResponseFilterSensitiveLog = DetectDominantLanguageResponseFilterSensitiveLog;
const DetectEntitiesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectEntitiesRequestFilterSensitiveLog = DetectEntitiesRequestFilterSensitiveLog;
const DetectEntitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectEntitiesResponseFilterSensitiveLog = DetectEntitiesResponseFilterSensitiveLog;
const DetectKeyPhrasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectKeyPhrasesRequestFilterSensitiveLog = DetectKeyPhrasesRequestFilterSensitiveLog;
const DetectKeyPhrasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectKeyPhrasesResponseFilterSensitiveLog = DetectKeyPhrasesResponseFilterSensitiveLog;
const DetectSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectSentimentRequestFilterSensitiveLog = DetectSentimentRequestFilterSensitiveLog;
const DetectSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectSentimentResponseFilterSensitiveLog = DetectSentimentResponseFilterSensitiveLog;
const DetectSyntaxRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectSyntaxRequestFilterSensitiveLog = DetectSyntaxRequestFilterSensitiveLog;
const DetectSyntaxResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectSyntaxResponseFilterSensitiveLog = DetectSyntaxResponseFilterSensitiveLog;
const DetectTargetedSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: smithy_client_1.SENSITIVE_STRING }),
});
exports.DetectTargetedSentimentRequestFilterSensitiveLog = DetectTargetedSentimentRequestFilterSensitiveLog;
const DetectTargetedSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DetectTargetedSentimentResponseFilterSensitiveLog = DetectTargetedSentimentResponseFilterSensitiveLog;
const ListDocumentClassifiersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DocumentClassifierPropertiesList && {
        DocumentClassifierPropertiesList: obj.DocumentClassifierPropertiesList.map((item) => (0, exports.DocumentClassifierPropertiesFilterSensitiveLog)(item)),
    }),
});
exports.ListDocumentClassifiersResponseFilterSensitiveLog = ListDocumentClassifiersResponseFilterSensitiveLog;
const ListEntityRecognizersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EntityRecognizerPropertiesList && {
        EntityRecognizerPropertiesList: obj.EntityRecognizerPropertiesList.map((item) => (0, exports.EntityRecognizerPropertiesFilterSensitiveLog)(item)),
    }),
});
exports.ListEntityRecognizersResponseFilterSensitiveLog = ListEntityRecognizersResponseFilterSensitiveLog;
