"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamPayloadHandler = void 0;
const eventstream_codec_1 = require("@aws-sdk/eventstream-codec");
const get_event_signing_stream_1 = require("./get-event-signing-stream");
class EventStreamPayloadHandler {
    constructor(options) {
        this.eventSigner = options.eventSigner;
        this.eventStreamCodec = new eventstream_codec_1.EventStreamCodec(options.utf8Encoder, options.utf8Decoder);
    }
    async handle(next, args, context = {}) {
        const request = args.request;
        const { body: payload, headers, query } = request;
        if (!(payload instanceof ReadableStream)) {
            throw new Error("Eventstream payload must be a ReadableStream.");
        }
        const placeHolderStream = new TransformStream();
        request.body = placeHolderStream.readable;
        let result;
        try {
            result = await next(args);
        }
        catch (e) {
            request.body.cancel();
            throw e;
        }
        const match = (headers["authorization"] || "").match(/Signature=([\w]+)$/);
        const priorSignature = (match || [])[1] || (query && query["X-Amz-Signature"]) || "";
        const signingStream = (0, get_event_signing_stream_1.getEventSigningTransformStream)(priorSignature, await this.eventSigner(), this.eventStreamCodec);
        const signedPayload = payload.pipeThrough(signingStream);
        signedPayload.pipeThrough(placeHolderStream);
        return result;
    }
}
exports.EventStreamPayloadHandler = EventStreamPayloadHandler;
