"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketFetchHandler = void 0;
const eventstream_serde_browser_1 = require("@aws-sdk/eventstream-serde-browser");
const fetch_http_handler_1 = require("@aws-sdk/fetch-http-handler");
const protocol_http_1 = require("@aws-sdk/protocol-http");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const utils_1 = require("./utils");
const DEFAULT_WS_CONNECTION_TIMEOUT_MS = 2000;
class WebSocketFetchHandler {
    constructor(options, httpHandler = new fetch_http_handler_1.FetchHttpHandler()) {
        this.metadata = {
            handlerProtocol: "websocket/h1.1",
        };
        this.sockets = {};
        this.httpHandler = httpHandler;
        if (typeof options === "function") {
            this.configPromise = options().then((opts) => opts !== null && opts !== void 0 ? opts : {});
        }
        else {
            this.configPromise = Promise.resolve(options !== null && options !== void 0 ? options : {});
        }
    }
    destroy() {
        for (const [key, sockets] of Object.entries(this.sockets)) {
            for (const socket of sockets) {
                socket.close(1000, `Socket closed through destroy() call`);
            }
            delete this.sockets[key];
        }
    }
    async handle(request) {
        if (!(0, utils_1.isWebSocketRequest)(request)) {
            return this.httpHandler.handle(request);
        }
        const url = (0, util_format_url_1.formatUrl)(request);
        const socket = new WebSocket(url);
        if (!this.sockets[url]) {
            this.sockets[url] = [];
        }
        this.sockets[url].push(socket);
        socket.binaryType = "arraybuffer";
        const { connectionTimeout = DEFAULT_WS_CONNECTION_TIMEOUT_MS } = await this.configPromise;
        await this.waitForReady(socket, connectionTimeout);
        const { body } = request;
        const bodyStream = getIterator(body);
        const asyncIterable = this.connect(socket, bodyStream);
        const outputPayload = toReadableStream(asyncIterable);
        return {
            response: new protocol_http_1.HttpResponse({
                statusCode: 200,
                body: outputPayload,
            }),
        };
    }
    removeNotUsableSockets(url) {
        this.sockets[url] = this.sockets[url].filter((socket) => ![WebSocket.CLOSING, WebSocket.CLOSED].includes(socket.readyState));
    }
    waitForReady(socket, connectionTimeout) {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                this.removeNotUsableSockets(socket.url);
                reject({
                    $metadata: {
                        httpStatusCode: 500,
                    },
                });
            }, connectionTimeout);
            socket.onopen = () => {
                clearTimeout(timeout);
                resolve();
            };
        });
    }
    connect(socket, data) {
        let streamError = undefined;
        const outputStream = {
            [Symbol.asyncIterator]: () => ({
                next: () => {
                    return new Promise((resolve, reject) => {
                        let socketErrorOccurred = false;
                        socket.onerror = (error) => {
                            socketErrorOccurred = true;
                            socket.close();
                            reject(error);
                        };
                        socket.onclose = () => {
                            this.removeNotUsableSockets(socket.url);
                            if (socketErrorOccurred)
                                return;
                            if (streamError) {
                                reject(streamError);
                            }
                            else {
                                resolve({
                                    done: true,
                                    value: undefined,
                                });
                            }
                        };
                        socket.onmessage = (event) => {
                            resolve({
                                done: false,
                                value: new Uint8Array(event.data),
                            });
                        };
                    });
                },
            }),
        };
        const send = async () => {
            try {
                for await (const inputChunk of data) {
                    socket.send(inputChunk);
                }
            }
            catch (err) {
                streamError = err;
            }
            finally {
                socket.close(1000);
            }
        };
        send();
        return outputStream;
    }
}
exports.WebSocketFetchHandler = WebSocketFetchHandler;
const getIterator = (stream) => {
    if (stream[Symbol.asyncIterator]) {
        return stream;
    }
    if (isReadableStream(stream)) {
        return (0, eventstream_serde_browser_1.readableStreamtoIterable)(stream);
    }
    return {
        [Symbol.asyncIterator]: async function* () {
            yield stream;
        },
    };
};
const toReadableStream = (asyncIterable) => typeof ReadableStream === "function" ? (0, eventstream_serde_browser_1.iterableToReadableStream)(asyncIterable) : asyncIterable;
const isReadableStream = (payload) => typeof ReadableStream === "function" && payload instanceof ReadableStream;
