"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.websocketEndpointMiddlewareOptions = exports.websocketEndpointMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const websocketEndpointMiddleware = (config, options) => (next) => (args) => {
    var _a, _b, _c;
    const { request } = args;
    if (protocol_http_1.HttpRequest.isInstance(request) &&
        ((_b = (_a = config.requestHandler.metadata) === null || _a === void 0 ? void 0 : _a.handlerProtocol) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes("websocket"))) {
        request.protocol = "wss:";
        request.method = "GET";
        request.path = `${request.path}-websocket`;
        const { headers } = request;
        delete headers["Content-Type"];
        delete headers["x-amz-content-sha256"];
        for (const name of Object.keys(headers)) {
            if (name.indexOf(options.headerPrefix) === 0) {
                const chunkedName = name.replace(options.headerPrefix, "");
                request.query[chunkedName] = headers[name];
            }
        }
        if (headers["x-amz-user-agent"]) {
            request.query["user-agent"] = headers["x-amz-user-agent"];
        }
        request.headers = { host: (_c = headers.host) !== null && _c !== void 0 ? _c : request.hostname };
    }
    return next(args);
};
exports.websocketEndpointMiddleware = websocketEndpointMiddleware;
exports.websocketEndpointMiddlewareOptions = {
    name: "websocketEndpointMiddleware",
    tags: ["WEBSOCKET", "EVENT_STREAM"],
    relation: "after",
    toMiddleware: "eventStreamHeaderMiddleware",
    override: true,
};
